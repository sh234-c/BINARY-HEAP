#include <bits/stdc++.h>

using namespace std;

class BinaryHeap {
  public:
    int capacity; /*Maximum elements that can be stored in heap*/
  int size; /*Current no of elements in heap*/
  int * arr; /*array for storing the keys*/

  BinaryHeap(int cap) {
    capacity = cap; /*Assigning the capacity*/
    size = 0; /*Intailly size of hepa is zero*/
    arr = new int[capacity]; /*Creating a array*/
  }

  /*returns the parent of ith Node*/
  int parent(int i) {
    return (i - 1) / 2;
  }
  /*returns the left child of ith Node*/
  int left(int i) {
    return 2 * i + 1;
  }
  /*Returns the right child of the ith Node*/
  int right(int i) {
    return 2 * i + 2;
  }

  /*Insert a new key x*/
  void Insert(int x) {
    if (size == capacity) 
  
      return;
      size++;
    
 
 arr[size-1]=x;
 
    /*Insert new element at end*/
 /*store the index ,for checking heap property*/
     /*Increase the size*/

    /*Fix the min heap property*/
for(int i=size-1;i!=0 && arr[parent(i)] > arr[i];i--){
      swap(&arr[i],&arr[parent(i)]);
      i= parent(i);
}
    
  }

  int getMin() {
    return arr[0];
  }

  void swap(int * x, int * y) {
    int temp = * x;
    * x = * y;
    * y = temp;
  }
};
int main()

{
  BinaryHeap h(20);
  h.Insert(4);
  h.Insert(1);
  h.Insert(2);
  h.Insert(6);
  h.Insert(7);
  h.Insert(3);
  h.Insert(8);
  h.Insert(5);
  cout << "Min value is " << h.getMin() << endl;
  h.Insert(-1);
  cout << "Min value is " << h.getMin() << endl;
  return 0;
}
