#include <bits/stdc++.h>
using namespace std;
//binary heap implementation
class BinaryHeap{
    public:
    int capacity;
    int size;
    int*arr;
    BinaryHeap(int cap){
        capacity=cap;
        size=0;
        arr=new int[capacity];
    }
    int parent(int i){
        return (i-1)/2;
    }
    int left(int i){
        return (2*i)+1;
    }
    int right(int i){
        return (2*i)+2;
    }
    void insert(int x){
        if(size==capacity){
            return;
        }
        size++;
        arr[size-1]=x;
        int i=size-1;
        while(i!=0 && arr[parent(i)]>arr[i]){
            swap(&arr[i],&arr[parent(i)]);
            i=parent(i);
        }
    }
    int getMin(){
        return arr[0];
    }
    void swap(int*x,int*y){
        int temp=*x;
        *x=*y;
        *y=temp;
    }
};
int main(){
    BinaryHeap h(20);
    h.insert(5);
    h.insert(10);
    h.insert(3);
    cout<<"Min value is"<<h.getMin()<<endl;
    h.insert(-2);
        cout<<"Min value is"<<h.getMin()<<endl;
        return 0;
    
}
